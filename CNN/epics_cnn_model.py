# -*- coding: utf-8 -*-
"""EPICS - CNN Model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18gSdfiFI6XR_H7juBFBPWl9obvRA4Uxo
"""

import tensorflow as tf
from keras.preprocessing.image import ImageDataGenerator

from google.colab import drive
drive.mount('/content/drive')

training_data_generator = ImageDataGenerator(
    rescale=1./255,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True
)

training_set = training_data_generator.flow_from_directory(
    '/content/drive/MyDrive/dataset/Training',
    target_size=(64,64),
    batch_size=32,
    class_mode='sparse'
)

test_data_generator = ImageDataGenerator(
    rescale=1./255
)

test_set = test_data_generator.flow_from_directory(
    '/content/drive/MyDrive/dataset/Testing',
    target_size=(64,64),
    batch_size=32,
    class_mode='sparse'
)

cnn = tf.keras.models.Sequential()
cnn.add(tf.keras.layers.Conv2D(filters=64, kernel_size=3, activation="relu", input_shape=[64, 64, 3]))
cnn.add(tf.keras.layers.MaxPool2D(pool_size=2, strides=2))
cnn.add(tf.keras.layers.Conv2D(filters=64, kernel_size=3, activation="relu"))
cnn.add(tf.keras.layers.MaxPool2D(pool_size=2, strides=2))
cnn.add(tf.keras.layers.Flatten())
cnn.add(tf.keras.layers.Dense(units=32, activation="relu"))
cnn.add(tf.keras.layers.Dense(units=5, activation="softmax"))
cnn.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])

history = cnn.fit(x=training_set, validation_data=test_set, epochs=10)

cnn.save('model.h5')

import matplotlib.pyplot as plt

# Plot training and validation accuracy
plt.figure(figsize=(12, 6))
plt.subplot(1, 2, 1)
plt.plot(history.history['accuracy'], label='Training Accuracy')
plt.plot(history.history['val_accuracy'], label='Validation Accuracy')
plt.title('Accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.legend()

# Plot training and validation loss
plt.subplot(1, 2, 2)
plt.plot(history.history['loss'], label='Training Loss')
plt.plot(history.history['val_loss'], label='Validation Loss')
plt.title('Loss')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.legend()

plt.show()

import numpy as np
from sklearn.metrics import confusion_matrix, classification_report
import seaborn as sns

# Load the trained model
cnn = tf.keras.models.load_model('model.h5')

# Evaluate the model on the test set
test_loss, test_accuracy = cnn.evaluate(test_set)

print(f"Test Loss: {test_loss}")
print(f"Test Accuracy: {test_accuracy}")

# Predict classes for the test set
predictions = cnn.predict(test_set)
predicted_classes = np.argmax(predictions, axis=1)

# Get true labels
true_classes = test_set.classes

# Plot confusion matrix
cm = confusion_matrix(true_classes, predicted_classes)
plt.figure(figsize=(8, 6))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=test_set.class_indices.keys(), yticklabels=test_set.class_indices.keys())
plt.xlabel('Predicted Labels')
plt.ylabel('True Labels')
plt.title('Confusion Matrix')
plt.show()

# Print classification report
print(classification_report(true_classes, predicted_classes, target_names=test_set.class_indices.keys()))

import numpy as np
import matplotlib.pyplot as plt
from tensorflow.keras.preprocessing import image

# Load the trained model
cnn = tf.keras.models.load_model('model.h5')

# Load the test image
img_path=input('Enter the testing image path: ')
img = image.load_img(img_path, target_size=(64, 64))
img_array = image.img_to_array(img)
img_array = np.expand_dims(img_array, axis=0)
img_array = img_array / 255.0  # Normalize the image data

# Predict the class label
prediction = cnn.predict(img_array)
predicted_class_index = np.argmax(prediction)
class_labels = {v: k for k, v in test_set.class_indices.items()}
predicted_label = class_labels[predicted_class_index]

# Display the image and the predicted label
plt.imshow(img)
plt.axis('off')
plt.title(f'Predicted Label: {predicted_label}')
plt.show()

# Calculate the confidence (accuracy) percentage
confidence = prediction[0][predicted_class_index] * 100
print(f'Predicted label: {predicted_label}')
print(f'Confidence: {confidence:.2f}%')

/content/drive/MyDrive/rust (365).jpeg