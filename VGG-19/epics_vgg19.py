# -*- coding: utf-8 -*-
"""Copy of Epics-VGG19.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1f28Z0RpJpEKh3b-ZLsr_Z-DxjIASlGLa
"""

from tensorflow.keras.layers import Input, Lambda, Dense, Flatten
from tensorflow.keras.models import Model
#from tensorflow.keras.applications.inception_v3 import InceptionV3
from tensorflow.keras.applications.resnet_v2 import ResNet152V2, preprocess_input
from tensorflow.keras.preprocessing import image
from tensorflow.keras.preprocessing.image import ImageDataGenerator,load_img
from tensorflow.keras.models import Sequential
import numpy as np
from glob import glob
#from tensorflow.keras.applications.mobilenet_v3 import MobileNetV3
import matplotlib.pyplot as plt
from tensorflow.keras.applications.vgg19 import VGG19

IMAGE_SIZE = [224, 224]

train_path = '/content/drive/MyDrive/dataset/Training'
valid_path = '/content/drive/MyDrive/dataset/Testing'

vgg19 = VGG19(input_shape=IMAGE_SIZE + [3], weights='imagenet', include_top=False)

for layer in vgg19.layers:
    layer.trainable = False

folders = glob('/content/drive/MyDrive/dataset/Training/*')

x = Flatten()(vgg19.output)

prediction = Dense(len(folders), activation='softmax')(x)
model = Model(inputs=vgg19.input, outputs=prediction)

model.summary()

model.compile(
  loss='categorical_crossentropy',
  optimizer='adam',
  metrics=['accuracy']
)

from tensorflow.keras.preprocessing.image import ImageDataGenerator

train_datagen = ImageDataGenerator(rescale = 1./255,
                                   shear_range = 0.2,
                                   zoom_range = 0.2,
                                   horizontal_flip = True)

test_datagen = ImageDataGenerator(rescale = 1./255)

training_set = train_datagen.flow_from_directory('/content/drive/MyDrive/dataset/Training',
                                                 target_size = (224, 224),
                                                 batch_size = 50,
                                                 class_mode = 'categorical')

test_set = test_datagen.flow_from_directory('/content/drive/MyDrive/dataset/Testing',
                                            target_size = (224, 224),
                                            batch_size = 50,
                                            class_mode = 'categorical')

r = model.fit(
  training_set,
  validation_data=test_set,
  epochs=5,
  steps_per_epoch=len(training_set),
  validation_steps=len(test_set)
)

plt.plot(r.history['loss'], label='train loss')
plt.plot(r.history['val_loss'], label='val loss')
plt.legend()
plt.show()
plt.savefig('LossVal_loss')
plt.plot(r.history['accuracy'], label='train acc')
plt.plot(r.history['val_accuracy'], label='val acc')
plt.legend()
plt.show()
plt.savefig('AccVal_acc')

from tensorflow.keras.models import load_model

model.save('/content/drive/MyDrive/dataset/model/vgg16model.h5')

y_pred = model.predict(test_set)

y_pred

import numpy as np
y_pred = np.argmax(y_pred, axis=1)

y_pred
l=['Healthy', 'Red Rot', 'Red Rust']
for i in y_pred:
     print(l[i], end=' ')



from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing import image

img=image.load_img('/content/drive/MyDrive/rust (365).jpeg',target_size=(224,224))

x=image.img_to_array(img)
x

x.shape

x=x/255
x

import numpy as np
x=np.expand_dims(x,axis=0)
img_data=preprocess_input(x)
img_data.shape

model.predict(img_data)

a=np.argmax(model.predict(img_data), axis=1)

a==1

import tensorflow as tf

def model_predict(img_path, model):
    print(img_path)
    img = image.load_img(img_path, target_size=(224, 224))
    x = image.img_to_array(img)
    x=x/255
    x = np.expand_dims(x, axis=0)
    preds = model.predict(x)
    preds=np.argmax(preds, axis=1)
    l=['Healthy', 'Red Rot', 'Red Rust']
    print('Disease : ',l[int(preds)].upper())

img_path=input('Enter the testing image path: ')
preds = model_predict(img_path, model)
preds

